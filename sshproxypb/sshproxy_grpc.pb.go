// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: sshproxypb/sshproxy.proto

package sshproxypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceTunnel_Connect_FullMethodName         = "/ServiceTunnel/Connect"
	ServiceTunnel_Disconnect_FullMethodName      = "/ServiceTunnel/Disconnect"
	ServiceTunnel_GetConnectNodes_FullMethodName = "/ServiceTunnel/GetConnectNodes"
)

// ServiceTunnelClient is the client API for ServiceTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTunnelClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	GetConnectNodes(ctx context.Context, in *GetConnectNodesRequest, opts ...grpc.CallOption) (*GetConnectNodesResponse, error)
}

type serviceTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTunnelClient(cc grpc.ClientConnInterface) ServiceTunnelClient {
	return &serviceTunnelClient{cc}
}

func (c *serviceTunnelClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, ServiceTunnel_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTunnelClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, ServiceTunnel_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTunnelClient) GetConnectNodes(ctx context.Context, in *GetConnectNodesRequest, opts ...grpc.CallOption) (*GetConnectNodesResponse, error) {
	out := new(GetConnectNodesResponse)
	err := c.cc.Invoke(ctx, ServiceTunnel_GetConnectNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTunnelServer is the server API for ServiceTunnel service.
// All implementations must embed UnimplementedServiceTunnelServer
// for forward compatibility
type ServiceTunnelServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	GetConnectNodes(context.Context, *GetConnectNodesRequest) (*GetConnectNodesResponse, error)
	mustEmbedUnimplementedServiceTunnelServer()
}

// UnimplementedServiceTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTunnelServer struct {
}

func (UnimplementedServiceTunnelServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedServiceTunnelServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedServiceTunnelServer) GetConnectNodes(context.Context, *GetConnectNodesRequest) (*GetConnectNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectNodes not implemented")
}
func (UnimplementedServiceTunnelServer) mustEmbedUnimplementedServiceTunnelServer() {}

// UnsafeServiceTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTunnelServer will
// result in compilation errors.
type UnsafeServiceTunnelServer interface {
	mustEmbedUnimplementedServiceTunnelServer()
}

func RegisterServiceTunnelServer(s grpc.ServiceRegistrar, srv ServiceTunnelServer) {
	s.RegisterService(&ServiceTunnel_ServiceDesc, srv)
}

func _ServiceTunnel_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTunnelServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTunnel_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTunnelServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTunnel_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTunnelServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTunnel_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTunnelServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTunnel_GetConnectNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTunnelServer).GetConnectNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTunnel_GetConnectNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTunnelServer).GetConnectNodes(ctx, req.(*GetConnectNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTunnel_ServiceDesc is the grpc.ServiceDesc for ServiceTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceTunnel",
	HandlerType: (*ServiceTunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ServiceTunnel_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ServiceTunnel_Disconnect_Handler,
		},
		{
			MethodName: "GetConnectNodes",
			Handler:    _ServiceTunnel_GetConnectNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sshproxypb/sshproxy.proto",
}
